{"version":3,"sources":["Reducers/ListReducer.js","contexts/ListContext.js","components/NavBar.js","contexts/ThemeContext.js","components/ListDetails.js","components/ListToDo.js","components/AddListForm.js","App.js","serviceWorker.js","index.js","img/list.svg"],"names":["ListReducer","state","action","type","title","list","date","dateLeft","completedBool","completed","id","uuid","filter","ListContext","createContext","ListContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","lists","dispatch","useEffect","setItem","stringify","Provider","value","children","NavBar","useContext","className","src","require","alt","length","ThemeContext","ThemeContextProvider","useState","window","setState","passFuncTheme","passID","map","ListDetails","theme","style","textDecoration","color","transform","onClick","bind","isNaN","dayLeftModifier","ListToDo","Date","getDate","month","getMonth","year","getFullYear","addZero","n","parseInt","key","AddListForm","setTitle","setDate","todayDate","startDate","setStartDate","onSubmit","e","preventDefault","mdy","split","inputDate","Math","round","console","log","placeholder","onChange","target","selected","dateFormat","onChangeRaw","placeholderText","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0b1d8a93.chunk.js","sourcesContent":["import uuid from 'uuid/v4'\n\nexport const ListReducer = (state, action) => {\n    \n    switch(action.type){\n        case 'Add_List':\n            return ([...state, {title: action.list.title, date: action.list.date,dateLeft: action.list.dateLeft, completedBool: action.list.completed ,id: uuid()}]);\n        case 'Remove_List':\n            return (state.filter(list => list.id !== action.id)) //state.filter(list => list.id !== action.id)\n        default:\n            return state\n    }\n}\n","import React, { createContext, useReducer, useEffect } from 'react';\n// import uuid from 'uuid/v1'\nimport { ListReducer } from '../Reducers/ListReducer';\n\nexport const ListContext = createContext();\nconst ListContextProvider = (props) => {\n    // lists = original data and setBooks = to change the state or data\n    const [lists, dispatch] = useReducer(ListReducer,[], \n        () => {\n        const localData = localStorage.getItem('lists');\n        return localData ? JSON.parse(localData) : []; \n    });\n\n    // store the data in local storage\n    useEffect(() =>{\n        localStorage.setItem('lists', JSON.stringify(lists))\n    }, [lists]);\n   \n\n    // const addBook = (title, date, dateLeft, completed) => {\n    //     setState([...lists, {title: title, date: date,dateLeft: dateLeft, completedBool: completed ,id: uuid()}]);\n    // };\n\n    // const removeBook = (id) => {\n    //     setState(lists.filter(book => book.id !== id))\n       \n    // }\n    // const completeFunc = (passID) => {\n    //     // setState({completed: !completed})\n    //     setState({lists :lists.map(list => {\n    //         if(list.id === passID){\n    //             list.completedBool = !list.completedBool\n    //         }\n    //             return (list.completedBool)\n    //         })})\n    //         console.log(passID);\n    // }\n\n    return (                          // {{lists, addBook, removeBook}}\n        <ListContext.Provider value = {{lists,dispatch}}>\n            {props.children}\n        </ListContext.Provider>\n     );\n}\n \nexport default ListContextProvider;","import React, { useContext } from 'react';\n\n// Context folder\nimport { ListContext } from '../contexts/ListContext';\n\n\nconst NavBar = () => {\n    // grap the lists from ListContext file\n    const {lists} = useContext(ListContext)\n    return ( \n        <div className= \"nav-bar\">\n            <h1>Reminder List</h1><span><img className=\"image\" src ={require(\"../img/list.svg\")} alt = \"\"></img></span>\n            <p>Currently you have {lists.length} List to do...</p>\n        </div>\n     );\n}\n \nexport default NavBar;","import React, { useState, createContext, useContext, useEffect } from 'react';\nimport  { ListContext } from './ListContext';\n\n\nexport const ThemeContext = createContext(); \nconst ThemeContextProvider = (props) => {\n    const[state, setState] = useState({}, () =>{\n        const localData = window.localStorage.getItem('complete')   \n        return localData ? JSON.parse(localData) : [];\n    } )\n    const { lists} = useContext(ListContext)\n    \n    useEffect(() =>{\n            window.localStorage.setItem('complete' , JSON.stringify(state)) \n     }, [state]);\n\n     \n    const completeFunc = (passID) => {\n        // setState({completed: !completed})\n        setState({lists :lists.map(list => {\n            if(list.id === passID){\n                list.completedBool = !list.completedBool\n            }\n                return (list.completedBool)\n            })})\n\n        \n    }\n\n    return ( \n        <ThemeContext.Provider value = {{...state, passFuncTheme: completeFunc }}>\n            {props.children}\n        </ThemeContext.Provider>\n     );\n}\n \nexport default ThemeContextProvider;\n// import React, { Component, createContext } from 'react';\n// import { ListContext } from './ListContext';\n\n// export const ThemeContext = createContext();\n\n// class ThemeContextProvider extends Component {\n//     static contextType = ListContext;\n    \n//     state = { \n//         completed: false,\n//         line: {\n//             textDecoration: \"line-through\"\n//         },\n//         noLine: {\n//             textDecoration: \"none\"\n//         }\n//      }\n//      passTheme = (id) => {\n//         this.setState({ \n//             completed: !this.state.completed\n//         })    \n//     }    \n         \n//     render() {\n//         return ( \n//             <ThemeContext.Provider  value= {{...this.state, passFuncTheme: this.passTheme}}>\n//                 {this.props.children}\n//             </ThemeContext.Provider>\n//          );\n//     }\n// }\n// export default ThemeContextProvider;\n\n","import React, { useContext } from 'react';\nimport  { ListContext } from '../contexts/ListContext';\nimport {ThemeContext} from '../contexts/ThemeContext'\n\n\n\nconst ListDetails = ({ list }) => {\n    const {dispatch} = useContext(ListContext)\n    const{passFuncTheme} = useContext(ThemeContext);\n    const theme = list.completedBool ? \"line-through\" : \"none\"\n    const dayLeftModifier = () => {\n        var date = list.dateLeft;\n        var dayStr = '';\n        if(isNaN(date) ){\n            dayStr = `enter date`\n        }  \n        else if(date <= 0){\n            date = 0;\n            dayStr = `${date} day left`\n        }\n        else{\n            date = date + 1\n            dayStr = `${date} days left`\n        }  \n        return dayStr;\n    }\n    \n    return (                 // removeBook(book.id)  // onClick = {() => dispatch({type: 'Remove_List', id: list.id})}\n        <li className=\"single-list\" style = {{textDecoration: theme, color: \"#D5DBDB\", transform: \"translateY(4px)\"}} onClick = {passFuncTheme.bind(this, list.id)}>\n            <button className = \"btn\" \n                        type = 'button'\n                        onClick = {() => dispatch({type: 'Remove_List', id: list.id})}>X\n            </button>\n            <div className=\"title\">{list.title} <span className = \"days-left\">{dayLeftModifier()}</span></div>\n            <div className=\"author\">{list.date}</div>\n            \n        \n        </li>\n     );\n}\n \nexport default ListDetails;","import React, { useContext } from 'react';\nimport { ListContext } from '../contexts/ListContext';\nimport  ListDetails from './ListDetails';\n// import  {ThemeContext } from '../contexts/ThemeContext'\n\n\nconst ListToDo = ( ) => {\n    const {lists} = useContext(ListContext);\n   \n    var date = new Date().getDate();\n    var month = new Date().getMonth()+1;\n    var year = new Date().getFullYear();\n\n    function addZero(n){\n        return(parseInt(n) < 10 ? '0' : '') + n;\n    }\n    \n    return lists.length ? ( \n        <div className = 'reminder-list' >\n            <div className = \"dateClass\">Today date: {addZero(month)}/{addZero(date)}/{year}</div>\n            <ul >\n                {lists.map(list =>{\n                    return(<ListDetails key = {list.id} list = {list}/>);\n                })}\n            </ul>\n        </div>\n     ) : (\n         <div className = \"empty\"> You do not have anything to do. What is your plan for future?</div>\n     );\n}\n \nexport default ListToDo;","import React, {useContext, useState } from 'react';\nimport { ListContext } from '../contexts/ListContext';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nconst AddListForm = () => {\n    const{dispatch} = useContext(ListContext);\n    const[title, setTitle] = useState(\"\");\n    // const[dateLeft] = useState('')\n    const [date, setDate] = useState('');\n\n    const todayDate = new Date();\n\n    const [startDate, setStartDate] = useState(new Date());\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        var mdy = date.split('/')\n        var inputDate = new Date(mdy[2], mdy[0] - 1, mdy[1]);\n        var  dateLeft = Math.round((inputDate - todayDate)/(1000*60*60*24));\n        var completed = false;\n        console.log( dateLeft + \" days left\");\n        dispatch({type: 'Add_List', list: {title, date, dateLeft, completed}})\n        // addBook(title, date, dateLeft, completed)\n        setTitle('');\n        setDate('');\n        setStartDate('');\n    }\n    const handleChange = (date) => {\n         setStartDate(date)\n    }\n    return ( \n        <form onSubmit = {handleSubmit} >\n            <input \n                type ='text' \n                placeholder= 'what is your plan for today?' \n                value = {title}\n                onChange = {(e) => setTitle(e.target.value)}>\n            </input>\n            {/* <input \n                type ='text' \n                placeholder= 'Due Date' \n                value = {date}\n                onChange = {(e) => setDate(e.target.value)}>\n            </input> */}\n            <div>\n                <DatePicker selected={startDate} \n                            dateFormat=\"MM/dd/yyyy\"\n                            onChange={handleChange } \n                            value = {setStartDate}\n                            \n                            onChangeRaw = {(e) => setDate(e.target.value)} \n                            placeholderText ='Due Date'\n                             \n                            />\n                    <span><input type = 'submit' value = 'Add List'/></span>  \n\n            </div>\n        </form>\n        \n     );\n}\n \nexport default AddListForm;","import React from 'react';\nimport ListContextProvider from './contexts/ListContext';\nimport NavBar from './components/NavBar';\nimport ListToDo from './components/ListToDo';\nimport AddListForm from './components/AddListForm';\nimport ThemeContextProvider from './contexts/ThemeContext';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ListContextProvider>\n        <NavBar></NavBar>\n        <ThemeContextProvider>\n          <ListToDo></ListToDo>\n        </ThemeContextProvider>\n        <AddListForm></AddListForm>\n        \n      </ListContextProvider> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/list.041b26b8.svg\";"],"sourceRoot":""}