{"ast":null,"code":"import _slicedToArray from \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ListContext.js\";\nimport React, { createContext, useReducer, useEffect, useState } from 'react';\nimport uuid from 'uuid/v1';\nimport { ListReducer } from '../Reducers/ListReducer';\nexport const ListContext = createContext();\n\nconst ListContextProvider = props => {\n  // lists = original data and setBooks = to change the state or data\n  const _useState = useState([], () => {\n    const localData = localStorage.getItem('lists');\n    return localData ? JSON.parse(localData) : [];\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        lists = _useState2[0],\n        setState = _useState2[1]; // store the data in local storage\n\n\n  useEffect(() => {\n    localStorage.setItem('lists', JSON.stringify(lists));\n  }, [lists]);\n\n  const addBook = (title, date, dateLeft, completed) => {\n    setState([...lists, {\n      title: title,\n      date: date,\n      dateLeft: dateLeft,\n      completedBool: completed,\n      id: uuid()\n    }]);\n  };\n\n  const removeBook = id => {\n    setState(lists.filter(book => book.id !== id));\n  };\n\n  const completeFunc = passID => {\n    // setState({completed: !completed})\n    setState({\n      lists: lists.map(list => {\n        if (list.id === passID) {\n          list.completedBool = !list.completedBool;\n        }\n\n        return list.completedBool;\n      })\n    });\n    console.log(passID);\n  };\n\n  return (// {{lists, addBook, removeBook}}\n    React.createElement(ListContext.Provider, {\n      value: {\n        lists,\n        addBook,\n        removeBook,\n        completeFunc\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, props.children)\n  );\n};\n\nexport default ListContextProvider;","map":{"version":3,"sources":["/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ListContext.js"],"names":["React","createContext","useReducer","useEffect","useState","uuid","ListReducer","ListContext","ListContextProvider","props","localData","localStorage","getItem","JSON","parse","lists","setState","setItem","stringify","addBook","title","date","dateLeft","completed","completedBool","id","removeBook","filter","book","completeFunc","passID","map","list","console","log","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGN,aAAa,EAAjC;;AACP,MAAMO,mBAAmB,GAAIC,KAAD,IAAW;AACnC;AADmC,oBAETL,QAAQ,CAAC,EAAD,EAC9B,MAAM;AACN,UAAMM,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,WAAOF,SAAS,GAAGG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAH,GAA2B,EAA3C;AACH,GAJiC,CAFC;AAAA;AAAA,QAE5BK,KAF4B;AAAA,QAErBC,QAFqB,kBAQnC;;;AACAb,EAAAA,SAAS,CAAC,MAAK;AACXQ,IAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAeH,KAAf,CAA9B;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAKA,QAAMI,OAAO,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAAwBC,SAAxB,KAAsC;AAClDP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAACK,MAAAA,KAAK,EAAEA,KAAR;AAAeC,MAAAA,IAAI,EAAEA,IAArB;AAA0BC,MAAAA,QAAQ,EAAEA,QAApC;AAA8CE,MAAAA,aAAa,EAAED,SAA7D;AAAwEE,MAAAA,EAAE,EAAEpB,IAAI;AAAhF,KAAX,CAAD,CAAR;AACH,GAFD;;AAIA,QAAMqB,UAAU,GAAID,EAAD,IAAQ;AACvBT,IAAAA,QAAQ,CAACD,KAAK,CAACY,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYA,EAAjC,CAAD,CAAR;AAEH,GAHD;;AAIA,QAAMI,YAAY,GAAIC,MAAD,IAAY;AAC7B;AACAd,IAAAA,QAAQ,CAAC;AAACD,MAAAA,KAAK,EAAEA,KAAK,CAACgB,GAAN,CAAUC,IAAI,IAAI;AAC/B,YAAGA,IAAI,CAACP,EAAL,KAAYK,MAAf,EAAsB;AAClBE,UAAAA,IAAI,CAACR,aAAL,GAAqB,CAACQ,IAAI,CAACR,aAA3B;AACH;;AACG,eAAQQ,IAAI,CAACR,aAAb;AACH,OALY;AAAR,KAAD,CAAR;AAMIS,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AAGP,GAXD;;AAaA,SAAkC;AAC9B,wBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAI;AAACf,QAAAA,KAAD;AAAQI,QAAAA,OAAR;AAAiBO,QAAAA,UAAjB;AAA6BG,QAAAA;AAA7B,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKpB,KAAK,CAAC0B,QADX;AADJ;AAKH,CAxCD;;AA0CA,eAAe3B,mBAAf","sourcesContent":["import React, { createContext, useReducer, useEffect, useState } from 'react';\nimport uuid from 'uuid/v1'\nimport { ListReducer } from '../Reducers/ListReducer';\n\nexport const ListContext = createContext();\nconst ListContextProvider = (props) => {\n    // lists = original data and setBooks = to change the state or data\n    const [lists, setState] = useState([], \n        () => {\n        const localData = localStorage.getItem('lists');\n        return localData ? JSON.parse(localData) : []; \n    });\n\n    // store the data in local storage\n    useEffect(() =>{\n        localStorage.setItem('lists', JSON.stringify(lists))\n    }, [lists]);\n   \n\n    const addBook = (title, date, dateLeft, completed) => {\n        setState([...lists, {title: title, date: date,dateLeft: dateLeft, completedBool: completed ,id: uuid()}]);\n    };\n\n    const removeBook = (id) => {\n        setState(lists.filter(book => book.id !== id))\n       \n    }\n    const completeFunc = (passID) => {\n        // setState({completed: !completed})\n        setState({lists :lists.map(list => {\n            if(list.id === passID){\n                list.completedBool = !list.completedBool\n            }\n                return (list.completedBool)\n            })})\n            console.log(passID);\n\n        \n    }\n\n    return (                          // {{lists, addBook, removeBook}}\n        <ListContext.Provider value = {{lists, addBook, removeBook, completeFunc}}>\n            {props.children}\n        </ListContext.Provider>\n     );\n}\n \nexport default ListContextProvider;"]},"metadata":{},"sourceType":"module"}