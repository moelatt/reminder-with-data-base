{"ast":null,"code":"import _slicedToArray from \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ListContext.js\";\nimport React, { createContext, useReducer, useEffect } from 'react'; // import uuid from 'uuid/v1'\n\nimport { ListReducer } from '../Reducers/ListReducer';\nexport const ListContext = createContext();\n\nconst ListContextProvider = props => {\n  // lists = original data and setBooks = to change the state or data\n  const _useReducer = useReducer(ListReducer, [], () => {\n    const localData = localStorage.getItem('lists');\n    return localData ? JSON.parse(localData) : [];\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        lists = _useReducer2[0],\n        dispatch = _useReducer2[1]; // store the data in local storage\n\n\n  useEffect(() => {\n    localStorage.setItem('lists', JSON.stringify(lists));\n  }, [lists]); // const addBook = (title, date) => {\n  //     setBooks([...lists, {title: title, date: date, id: uuid()}]);\n  // };\n  // const removeBook = (id) => {\n  //     setBooks(lists.filter(book => book.id !== id))\n  // }\n\n  const completeFunc = passID => {\n    // setState({completed: !completed})\n    dispatch({\n      lists: lists.map(list => {\n        if (list.id === passID) {\n          list.completedBool = !list.completedBool;\n        }\n\n        return list.completedBool;\n      })\n    });\n    console.log(passID);\n  };\n\n  return (// {{lists, addBook, removeBook}}\n    React.createElement(ListContext.Provider, {\n      value: {\n        lists,\n        dispatch,\n        completeFunc\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, props.children)\n  );\n};\n\nexport default ListContextProvider;","map":{"version":3,"sources":["/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ListContext.js"],"names":["React","createContext","useReducer","useEffect","ListReducer","ListContext","ListContextProvider","props","localData","localStorage","getItem","JSON","parse","lists","dispatch","setItem","stringify","completeFunc","passID","map","list","id","completedBool","console","log","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,OAA5D,C,CACA;;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AACP,MAAMK,mBAAmB,GAAIC,KAAD,IAAW;AACnC;AADmC,sBAETL,UAAU,CAACE,WAAD,EAAc,EAAd,EAChC,MAAM;AACN,UAAMI,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,WAAOF,SAAS,GAAGG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAH,GAA2B,EAA3C;AACH,GAJmC,CAFD;AAAA;AAAA,QAE5BK,KAF4B;AAAA,QAErBC,QAFqB,oBAQnC;;;AACAX,EAAAA,SAAS,CAAC,MAAK;AACXM,IAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAeH,KAAf,CAA9B;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CATmC,CAcnC;AACA;AACA;AAEA;AACA;AAEA;;AACA,QAAMI,YAAY,GAAIC,MAAD,IAAY;AAC7B;AACAJ,IAAAA,QAAQ,CAAC;AAACD,MAAAA,KAAK,EAAEA,KAAK,CAACM,GAAN,CAAUC,IAAI,IAAI;AAC/B,YAAGA,IAAI,CAACC,EAAL,KAAYH,MAAf,EAAsB;AAClBE,UAAAA,IAAI,CAACE,aAAL,GAAqB,CAACF,IAAI,CAACE,aAA3B;AACH;;AACG,eAAQF,IAAI,CAACE,aAAb;AACH,OALY;AAAR,KAAD,CAAR;AAMIC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AAGP,GAXD;;AAaA,SAAkC;AAC9B,wBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAI;AAACL,QAAAA,KAAD;AAAQC,QAAAA,QAAR;AAAkBG,QAAAA;AAAlB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKV,KAAK,CAACkB,QADX;AADJ;AAKH,CAxCD;;AA0CA,eAAenB,mBAAf","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\n// import uuid from 'uuid/v1'\nimport { ListReducer } from '../Reducers/ListReducer';\n\nexport const ListContext = createContext();\nconst ListContextProvider = (props) => {\n    // lists = original data and setBooks = to change the state or data\n    const [lists, dispatch] = useReducer(ListReducer ,[], \n        () => {\n        const localData = localStorage.getItem('lists');\n        return localData ? JSON.parse(localData) : []; \n    });\n\n    // store the data in local storage\n    useEffect(() =>{\n        localStorage.setItem('lists', JSON.stringify(lists))\n    }, [lists]);\n   \n\n    // const addBook = (title, date) => {\n    //     setBooks([...lists, {title: title, date: date, id: uuid()}]);\n    // };\n\n    // const removeBook = (id) => {\n    //     setBooks(lists.filter(book => book.id !== id))\n       \n    // }\n    const completeFunc = (passID) => {\n        // setState({completed: !completed})\n        dispatch({lists :lists.map(list => {\n            if(list.id === passID){\n                list.completedBool = !list.completedBool\n            }\n                return (list.completedBool)\n            })})\n            console.log(passID);\n\n        \n    }\n\n    return (                          // {{lists, addBook, removeBook}}\n        <ListContext.Provider value = {{lists, dispatch, completeFunc}}>\n            {props.children}\n        </ListContext.Provider>\n     );\n}\n \nexport default ListContextProvider;"]},"metadata":{},"sourceType":"module"}