{"ast":null,"code":"import _defineProperty from \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ThemeContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext, useContext, useEffect } from 'react';\nimport { ListContext } from './ListContext';\nexport const ThemeContext = createContext();\n\nconst ThemeContextProvider = props => {\n  const _useState = useState({}, () => {\n    const localData = window.localStorage.getItem('complete');\n    return localData ? JSON.parse(localData) : [];\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useContext = useContext(ListContext, () => {\n    const localData = window.localStorage.getItem('complete');\n    return localData ? JSON.parse(localData) : [];\n  }),\n        lists = _useContext.lists;\n\n  useEffect(() => {\n    window.localStorage.setItem('complete', JSON.stringify(state));\n  }, [state]);\n\n  const completeFunc = passID => {\n    // setState({completed: !completed})\n    setState({\n      lists: lists.map(list => {\n        if (list.id === passID) {\n          list.completedBool = !list.completedBool;\n        }\n\n        return list;\n      })\n    });\n  };\n\n  return React.createElement(ThemeContext.Provider, {\n    value: _objectSpread({}, state, {\n      passFuncTheme: completeFunc\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ThemeContextProvider; // import React, { Component, createContext } from 'react';\n// import { ListContext } from './ListContext';\n// export const ThemeContext = createContext();\n// class ThemeContextProvider extends Component {\n//     static contextType = ListContext;\n//     state = { \n//         completed: false,\n//         line: {\n//             textDecoration: \"line-through\"\n//         },\n//         noLine: {\n//             textDecoration: \"none\"\n//         }\n//      }\n//      passTheme = (id) => {\n//         this.setState({ \n//             completed: !this.state.completed\n//         })    \n//     }    \n//     render() {\n//         return ( \n//             <ThemeContext.Provider  value= {{...this.state, passFuncTheme: this.passTheme}}>\n//                 {this.props.children}\n//             </ThemeContext.Provider>\n//          );\n//     }\n// }\n// export default ThemeContextProvider;","map":{"version":3,"sources":["/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ThemeContext.js"],"names":["React","useState","createContext","useContext","useEffect","ListContext","ThemeContext","ThemeContextProvider","props","localData","window","localStorage","getItem","JSON","parse","state","setState","lists","setItem","stringify","completeFunc","passID","map","list","id","completedBool","passFuncTheme","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,UAAzC,EAAqDC,SAArD,QAAsE,OAAtE;AACA,SAAUC,WAAV,QAA6B,eAA7B;AAGA,OAAO,MAAMC,YAAY,GAAGJ,aAAa,EAAlC;;AACP,MAAMK,oBAAoB,GAAIC,KAAD,IAAW;AAAA,oBACXP,QAAQ,CAAC,EAAD,EAAK,MAAM;AACxC,UAAMQ,SAAS,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAlB;AACA,WAAOH,SAAS,GAAGI,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAH,GAA2B,EAA3C;AACH,GAHgC,CADG;AAAA;AAAA,QAC9BM,KAD8B;AAAA,QACvBC,QADuB;;AAAA,sBAKnBb,UAAU,CAACE,WAAD,EAAc,MAAK;AAC1C,UAAMI,SAAS,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAlB;AACA,WAAOH,SAAS,GAAGI,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAH,GAA2B,EAA3C;AACH,GAH0B,CALS;AAAA,QAK5BQ,KAL4B,eAK5BA,KAL4B;;AAUpCb,EAAAA,SAAS,CAAC,MAAK;AACPM,IAAAA,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4B,UAA5B,EAAyCL,IAAI,CAACM,SAAL,CAAeJ,KAAf,CAAzC;AACN,GAFO,EAEL,CAACA,KAAD,CAFK,CAAT;;AAGA,QAAMK,YAAY,GAAIC,MAAD,IAAY;AAC7B;AACAL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,KAAK,EAAEA,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AAC/B,YAAGA,IAAI,CAACC,EAAL,KAAYH,MAAf,EAAsB;AAClBE,UAAAA,IAAI,CAACE,aAAL,GAAqB,CAACF,IAAI,CAACE,aAA3B;AACH;;AACG,eAAQF,IAAR;AACH,OALY;AAAR,KAAD,CAAR;AAMH,GARD;;AAUA,SACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,oBAAQR,KAAR;AAAeW,MAAAA,aAAa,EAAEN;AAA9B,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,KAAK,CAACmB,QADX,CADJ;AAKH,CA5BD;;AA8BA,eAAepB,oBAAf,C,CACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, createContext, useContext, useEffect } from 'react';\nimport  { ListContext } from './ListContext';\n\n\nexport const ThemeContext = createContext(); \nconst ThemeContextProvider = (props) => {\n    const[state, setState] = useState({}, () => {\n        const localData = window.localStorage.getItem('complete')   \n        return localData ? JSON.parse(localData) : [];\n    })\n    const { lists} = useContext(ListContext, () =>{\n        const localData = window.localStorage.getItem('complete')   \n        return localData ? JSON.parse(localData) : [];\n    })\n\n    useEffect(() =>{\n            window.localStorage.setItem('complete' , JSON.stringify(state)) \n     }, [state]);\n    const completeFunc = (passID) => {\n        // setState({completed: !completed})\n        setState({lists :lists.map(list => {\n            if(list.id === passID){\n                list.completedBool = !list.completedBool\n            }\n                return (list)\n            })})\n    }\n\n    return ( \n        <ThemeContext.Provider value = {{...state, passFuncTheme: completeFunc }}>\n            {props.children}\n        </ThemeContext.Provider>\n     );\n}\n \nexport default ThemeContextProvider;\n// import React, { Component, createContext } from 'react';\n// import { ListContext } from './ListContext';\n\n// export const ThemeContext = createContext();\n\n// class ThemeContextProvider extends Component {\n//     static contextType = ListContext;\n    \n//     state = { \n//         completed: false,\n//         line: {\n//             textDecoration: \"line-through\"\n//         },\n//         noLine: {\n//             textDecoration: \"none\"\n//         }\n//      }\n//      passTheme = (id) => {\n//         this.setState({ \n//             completed: !this.state.completed\n//         })    \n//     }    \n         \n//     render() {\n//         return ( \n//             <ThemeContext.Provider  value= {{...this.state, passFuncTheme: this.passTheme}}>\n//                 {this.props.children}\n//             </ThemeContext.Provider>\n//          );\n//     }\n// }\n// export default ThemeContextProvider;\n\n"]},"metadata":{},"sourceType":"module"}