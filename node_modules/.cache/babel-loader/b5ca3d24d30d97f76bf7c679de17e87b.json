{"ast":null,"code":"import _slicedToArray from \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ListContext.js\";\nimport React, { createContext, useReducer, useEffect } from 'react'; // import uuid from 'uuid/v1'\n\nimport { ListReducer } from '../Reducers/ListReducer';\nexport const ListContext = createContext();\n\nconst ListContextProvider = props => {\n  state = {\n    completed: false,\n    dark: {\n      textDecoration: 'line-through',\n      syntax: '#fff',\n      ui: '#333',\n      bg: '#555'\n    }\n  };\n\n  const theme = () => {\n    this.setState({\n      completed: !this.state.completed\n    });\n  }; // lists = original data and setBooks = to change the state or data\n\n\n  const _useReducer = useReducer(ListReducer, [], () => {\n    const localData = localStorage.getItem('lists');\n    return localData ? JSON.parse(localData) : [];\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        lists = _useReducer2[0],\n        dispatch = _useReducer2[1]; // store the data in local storage\n\n\n  useEffect(() => {\n    localStorage.setItem('lists', JSON.stringify(lists));\n  }, [lists]); // const addBook = (title, date) => {\n  //     setBooks([...lists, {title: title, date: date, id: uuid()}]);\n  // };\n  // const removeBook = (id) => {\n  //     setBooks(lists.filter(book => book.id !== id))\n  // }\n\n  return (// {{lists, addBook, removeBook}}\n    React.createElement(ListContext.Provider, {\n      value: {\n        lists,\n        dispatch\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, props.children)\n  );\n};\n\nexport default ListContextProvider;","map":{"version":3,"sources":["/Users/mlatt/Desktop/Folders/javaScript:HTML:React:NodeJS/React/ToDoList:Data-base:React/reminder-with-data-base/src/contexts/ListContext.js"],"names":["React","createContext","useReducer","useEffect","ListReducer","ListContext","ListContextProvider","props","state","completed","dark","textDecoration","syntax","ui","bg","theme","setState","localData","localStorage","getItem","JSON","parse","lists","dispatch","setItem","stringify","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,OAA5D,C,CACA;;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AAEP,MAAMK,mBAAmB,GAAIC,KAAD,IAAW;AACnCC,EAAAA,KAAK,GAAG;AACJC,IAAAA,SAAS,EAAE,KADP;AAEJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,cAAc,EAAE,cADd;AAEFC,MAAAA,MAAM,EAAE,MAFN;AAGFC,MAAAA,EAAE,EAAE,MAHF;AAIFC,MAAAA,EAAE,EAAE;AAJF;AAFF,GAAR;;AASA,QAAMC,KAAK,GAAG,MAAM;AAChB,SAAKC,QAAL,CAAc;AAACP,MAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAxB,KAAd;AACH,GAFD,CAVmC,CAanC;;;AAbmC,sBAcTP,UAAU,CAACE,WAAD,EAAc,EAAd,EAAkB,MAAM;AACxD,UAAMa,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,WAAOF,SAAS,GAAGG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAH,GAA2B,EAA3C;AACH,GAHmC,CAdD;AAAA;AAAA,QAc5BK,KAd4B;AAAA,QAcrBC,QAdqB,oBAmBnC;;;AACApB,EAAAA,SAAS,CAAC,MAAK;AACZe,IAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAeH,KAAf,CAA9B;AACF,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CApBmC,CAyBnC;AACA;AACA;AAEA;AACA;AAEA;;AAEA,SAAkC;AAC9B,wBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAI;AAACA,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKhB,KAAK,CAACmB,QADX;AADJ;AAKH,CAvCD;;AAyCA,eAAepB,mBAAf","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\n// import uuid from 'uuid/v1'\nimport { ListReducer } from '../Reducers/ListReducer';\n\nexport const ListContext = createContext();\n\nconst ListContextProvider = (props) => {\n    state = {\n        completed: false,\n        dark: {\n            textDecoration: 'line-through',\n            syntax: '#fff',\n            ui: '#333',\n            bg: '#555'\n        }\n    }\n    const theme = () => {\n        this.setState({completed: !this.state.completed})\n    }\n    // lists = original data and setBooks = to change the state or data\n    const [lists, dispatch] = useReducer(ListReducer ,[], () => {\n        const localData = localStorage.getItem('lists');\n        return localData ? JSON.parse(localData) : []; \n    });\n\n    // store the data in local storage\n    useEffect(() =>{\n       localStorage.setItem('lists', JSON.stringify(lists))\n    }, [lists]);\n   \n\n    // const addBook = (title, date) => {\n    //     setBooks([...lists, {title: title, date: date, id: uuid()}]);\n    // };\n\n    // const removeBook = (id) => {\n    //     setBooks(lists.filter(book => book.id !== id))\n       \n    // }\n\n    return (                          // {{lists, addBook, removeBook}}\n        <ListContext.Provider value = {{lists, dispatch}}>\n            {props.children}\n        </ListContext.Provider>\n     );\n}\n \nexport default ListContextProvider;"]},"metadata":{},"sourceType":"module"}